/**
 * @format
 */

import {AppRegistry} from 'react-native';
import App from './App';
import messaging from '@react-native-firebase/messaging';
import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import {name as appName} from './app.json';

// Must be outside of any component LifeCycle (such as `componentDidMount`).
PushNotification.configure({
  // (optional) Called when Token is generated (iOS and Android)
  onRegister: function (token) {
    console.log('TOKEN:', token);
  },

  // (required) Called when a remote is received or opened, or local notification is opened
  onNotification: function (notification) {
    console.log('NOTIFICATION:', notification);

    // process the notification
    // (required) Called when a remote is received or opened, or local notification is opened
    notification.finish(PushNotificationIOS.FetchResult.NoData);
  },

  // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
  onAction: function (notification) {
    console.log('ACTION:', notification.action);
    console.log('NOTIFICATION:', notification);
    // process the action
  },

  // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
  onRegistrationError: function (err) {
    console.error(err.message, err);
  },

  // IOS ONLY (optional): default: all - Permissions to register.
  permissions: {
    alert: true,
    badge: true,
    sound: true,
  },

  // Should the initial notification be popped automatically
  // default: true

  popInitialNotification: true,

  /**
   * (optional) default: true
   * - Specified if permissions (ios) and token (android and ios) will requested or not,
   * - if not, you must call PushNotificationsHandler.requestPermissions() later
   * - if you are not using remote notification or do not have Firebase installed, use this:
   *     requestPermissions: Platform.OS === 'ios'
   */

  requestPermissions: true,
});


// // Register background handler
// messaging().setBackgroundMessageHandler(async remoteMessage => {
//     console.log('Message handled in the background!', remoteMessage);
//     showNotification(remoteMessage)
//   });

//   const showNotification = (remoteMessage) => {
//     //console.log("noti_message " + remoteMessage);
//     PushNotification.createChannel(
//       {
//         channelId: remoteMessage.messageId, // (required)
//         channelName: `Custom channel - Counter: ${remoteMessage.messageId}`, // (required)
//         channelDescription: `A custom channel to categorise your custom notifications. Updated at: ${Date.now()}`, // (optional) default: undefined.
//         soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
//         importance: 4, // (optional) default: 4. Int value of the Android notification importance
//         vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
//       },
//       (created) => console.log(`createChannel returned '${created}'`) // (optional) callback returns whether the channel was created, false means it already existed.
//     );

//     let data;
//    // console.log("data_message " + remoteMessage.hasOwnProperty("data"));
//     if (remoteMessage.hasOwnProperty("data") && remoteMessage.data) {
//       let notification = remoteMessage.data;
//       data = {
//         message: notification.noti_body ? notification.noti_body : remoteMessage.notification.body,
//         title: notification.noti_title ? notification.noti_title : remoteMessage.notification.title,
//         //image: notification.noti_image_url ? notification.noti_image_url : remoteMessage.notification.image,
//       };
//       // console.log("admin_data_noti" + data);
//     } else {
//       data = remoteMessage.notification;
//     }

//     PushNotification.localNotification({
//       /* Android Only Properties */
//       // id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
//       vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
//       priority: "high", // (optional) set notification priority, default: high
//       importance: 4, // (optional) set notification importance, default: high
//       /* iOS and Android properties */
//       title: data.title, // (optional)
//       message: data.body, // remoteMessage.data.message, // (required),
//       channelId: remoteMessage.messageId,
//       //bigPictureUrl: data.image,
//     });
//   };

  
AppRegistry.registerComponent(appName, () => App);
